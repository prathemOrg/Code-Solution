#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CodeSolutionDataLayer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CodeSolution")]
	public partial class CodeSolutionDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertComment(Comment instance);
    partial void UpdateComment(Comment instance);
    partial void DeleteComment(Comment instance);
    partial void InsertVote(Vote instance);
    partial void UpdateVote(Vote instance);
    partial void DeleteVote(Vote instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertSolution(Solution instance);
    partial void UpdateSolution(Solution instance);
    partial void DeleteSolution(Solution instance);
    partial void InsertProblem(Problem instance);
    partial void UpdateProblem(Problem instance);
    partial void DeleteProblem(Problem instance);
    #endregion
		
		public CodeSolutionDataContext() : 
				base(global::CodeSolution.Properties.Settings.Default.CodeSolutionConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CodeSolutionDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CodeSolutionDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CodeSolutionDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CodeSolutionDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Comment> Comments
		{
			get
			{
				return this.GetTable<Comment>();
			}
		}
		
		public System.Data.Linq.Table<Vote> Votes
		{
			get
			{
				return this.GetTable<Vote>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Solution> Solutions
		{
			get
			{
				return this.GetTable<Solution>();
			}
		}
		
		public System.Data.Linq.Table<Problem> Problems
		{
			get
			{
				return this.GetTable<Problem>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Comment")]
	public partial class Comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CommentId;
		
		private string _CommentDesc;
		
		private int _UserId;
		
		private int _SolutionId;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCommentIdChanging(int value);
    partial void OnCommentIdChanged();
    partial void OnCommentDescChanging(string value);
    partial void OnCommentDescChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnSolutionIdChanging(int value);
    partial void OnSolutionIdChanged();
    #endregion
		
		public Comment()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CommentId
		{
			get
			{
				return this._CommentId;
			}
			set
			{
				if ((this._CommentId != value))
				{
					this.OnCommentIdChanging(value);
					this.SendPropertyChanging();
					this._CommentId = value;
					this.SendPropertyChanged("CommentId");
					this.OnCommentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentDesc", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string CommentDesc
		{
			get
			{
				return this._CommentDesc;
			}
			set
			{
				if ((this._CommentDesc != value))
				{
					this.OnCommentDescChanging(value);
					this.SendPropertyChanging();
					this._CommentDesc = value;
					this.SendPropertyChanged("CommentDesc");
					this.OnCommentDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SolutionId", DbType="Int NOT NULL")]
		public int SolutionId
		{
			get
			{
				return this._SolutionId;
			}
			set
			{
				if ((this._SolutionId != value))
				{
					this.OnSolutionIdChanging(value);
					this.SendPropertyChanging();
					this._SolutionId = value;
					this.SendPropertyChanged("SolutionId");
					this.OnSolutionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Comment", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Vote")]
	public partial class Vote : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VoteId;
		
		private System.Nullable<int> _UserId;
		
		private int _SolutionID;
		
		private EntityRef<User> _User;
		
		private EntityRef<Solution> _Solution;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVoteIdChanging(int value);
    partial void OnVoteIdChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    partial void OnSolutionIDChanging(int value);
    partial void OnSolutionIDChanged();
    #endregion
		
		public Vote()
		{
			this._User = default(EntityRef<User>);
			this._Solution = default(EntityRef<Solution>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VoteId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int VoteId
		{
			get
			{
				return this._VoteId;
			}
			set
			{
				if ((this._VoteId != value))
				{
					this.OnVoteIdChanging(value);
					this.SendPropertyChanging();
					this._VoteId = value;
					this.SendPropertyChanged("VoteId");
					this.OnVoteIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int")]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SolutionID", DbType="Int NOT NULL")]
		public int SolutionID
		{
			get
			{
				return this._SolutionID;
			}
			set
			{
				if ((this._SolutionID != value))
				{
					if (this._Solution.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSolutionIDChanging(value);
					this.SendPropertyChanging();
					this._SolutionID = value;
					this.SendPropertyChanged("SolutionID");
					this.OnSolutionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Vote", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Votes.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Votes.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Solution_Vote", Storage="_Solution", ThisKey="SolutionID", OtherKey="SolutionId", IsForeignKey=true)]
		public Solution Solution
		{
			get
			{
				return this._Solution.Entity;
			}
			set
			{
				Solution previousValue = this._Solution.Entity;
				if (((previousValue != value) 
							|| (this._Solution.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Solution.Entity = null;
						previousValue.Votes.Remove(this);
					}
					this._Solution.Entity = value;
					if ((value != null))
					{
						value.Votes.Add(this);
						this._SolutionID = value.SolutionId;
					}
					else
					{
						this._SolutionID = default(int);
					}
					this.SendPropertyChanged("Solution");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _UserFirstName;
		
		private string _UserLastName;
		
		private string _UserEmail;
		
		private int _UserRoleId;
		
		private string _UserPassword;
		
		private EntitySet<Comment> _Comments;
		
		private EntitySet<Vote> _Votes;
		
		private EntitySet<Solution> _Solutions;
		
		private EntitySet<Problem> _Problems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnUserFirstNameChanging(string value);
    partial void OnUserFirstNameChanged();
    partial void OnUserLastNameChanging(string value);
    partial void OnUserLastNameChanged();
    partial void OnUserEmailChanging(string value);
    partial void OnUserEmailChanged();
    partial void OnUserRoleIdChanging(int value);
    partial void OnUserRoleIdChanged();
    partial void OnUserPasswordChanging(string value);
    partial void OnUserPasswordChanged();
    #endregion
		
		public User()
		{
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._Votes = new EntitySet<Vote>(new Action<Vote>(this.attach_Votes), new Action<Vote>(this.detach_Votes));
			this._Solutions = new EntitySet<Solution>(new Action<Solution>(this.attach_Solutions), new Action<Solution>(this.detach_Solutions));
			this._Problems = new EntitySet<Problem>(new Action<Problem>(this.attach_Problems), new Action<Problem>(this.detach_Problems));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserFirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string UserFirstName
		{
			get
			{
				return this._UserFirstName;
			}
			set
			{
				if ((this._UserFirstName != value))
				{
					this.OnUserFirstNameChanging(value);
					this.SendPropertyChanging();
					this._UserFirstName = value;
					this.SendPropertyChanged("UserFirstName");
					this.OnUserFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserLastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string UserLastName
		{
			get
			{
				return this._UserLastName;
			}
			set
			{
				if ((this._UserLastName != value))
				{
					this.OnUserLastNameChanging(value);
					this.SendPropertyChanging();
					this._UserLastName = value;
					this.SendPropertyChanged("UserLastName");
					this.OnUserLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserEmail", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string UserEmail
		{
			get
			{
				return this._UserEmail;
			}
			set
			{
				if ((this._UserEmail != value))
				{
					this.OnUserEmailChanging(value);
					this.SendPropertyChanging();
					this._UserEmail = value;
					this.SendPropertyChanged("UserEmail");
					this.OnUserEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserRoleId", DbType="Int NOT NULL")]
		public int UserRoleId
		{
			get
			{
				return this._UserRoleId;
			}
			set
			{
				if ((this._UserRoleId != value))
				{
					this.OnUserRoleIdChanging(value);
					this.SendPropertyChanging();
					this._UserRoleId = value;
					this.SendPropertyChanged("UserRoleId");
					this.OnUserRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserPassword", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string UserPassword
		{
			get
			{
				return this._UserPassword;
			}
			set
			{
				if ((this._UserPassword != value))
				{
					this.OnUserPasswordChanging(value);
					this.SendPropertyChanging();
					this._UserPassword = value;
					this.SendPropertyChanged("UserPassword");
					this.OnUserPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Comment", Storage="_Comments", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Vote", Storage="_Votes", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<Vote> Votes
		{
			get
			{
				return this._Votes;
			}
			set
			{
				this._Votes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Solution", Storage="_Solutions", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<Solution> Solutions
		{
			get
			{
				return this._Solutions;
			}
			set
			{
				this._Solutions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Problem", Storage="_Problems", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<Problem> Problems
		{
			get
			{
				return this._Problems;
			}
			set
			{
				this._Problems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Votes(Vote entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Votes(Vote entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Solutions(Solution entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Solutions(Solution entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Problems(Problem entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Problems(Problem entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Solution")]
	public partial class Solution : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SolutionId;
		
		private string _SolutionDesc;
		
		private int _ProblemId;
		
		private int _UserId;
		
		private System.Nullable<System.DateTime> _SolutionGivenDate;
		
		private EntitySet<Vote> _Votes;
		
		private EntityRef<User> _User;
		
		private EntityRef<Problem> _Problem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSolutionIdChanging(int value);
    partial void OnSolutionIdChanged();
    partial void OnSolutionDescChanging(string value);
    partial void OnSolutionDescChanged();
    partial void OnProblemIdChanging(int value);
    partial void OnProblemIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnSolutionGivenDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSolutionGivenDateChanged();
    #endregion
		
		public Solution()
		{
			this._Votes = new EntitySet<Vote>(new Action<Vote>(this.attach_Votes), new Action<Vote>(this.detach_Votes));
			this._User = default(EntityRef<User>);
			this._Problem = default(EntityRef<Problem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SolutionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SolutionId
		{
			get
			{
				return this._SolutionId;
			}
			set
			{
				if ((this._SolutionId != value))
				{
					this.OnSolutionIdChanging(value);
					this.SendPropertyChanging();
					this._SolutionId = value;
					this.SendPropertyChanged("SolutionId");
					this.OnSolutionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SolutionDesc", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string SolutionDesc
		{
			get
			{
				return this._SolutionDesc;
			}
			set
			{
				if ((this._SolutionDesc != value))
				{
					this.OnSolutionDescChanging(value);
					this.SendPropertyChanging();
					this._SolutionDesc = value;
					this.SendPropertyChanged("SolutionDesc");
					this.OnSolutionDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProblemId", DbType="Int NOT NULL")]
		public int ProblemId
		{
			get
			{
				return this._ProblemId;
			}
			set
			{
				if ((this._ProblemId != value))
				{
					if (this._Problem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProblemIdChanging(value);
					this.SendPropertyChanging();
					this._ProblemId = value;
					this.SendPropertyChanged("ProblemId");
					this.OnProblemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SolutionGivenDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> SolutionGivenDate
		{
			get
			{
				return this._SolutionGivenDate;
			}
			set
			{
				if ((this._SolutionGivenDate != value))
				{
					this.OnSolutionGivenDateChanging(value);
					this.SendPropertyChanging();
					this._SolutionGivenDate = value;
					this.SendPropertyChanged("SolutionGivenDate");
					this.OnSolutionGivenDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Solution_Vote", Storage="_Votes", ThisKey="SolutionId", OtherKey="SolutionID")]
		public EntitySet<Vote> Votes
		{
			get
			{
				return this._Votes;
			}
			set
			{
				this._Votes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Solution", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Solutions.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Solutions.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Problem_Solution", Storage="_Problem", ThisKey="ProblemId", OtherKey="ProblemId", IsForeignKey=true)]
		public Problem Problem
		{
			get
			{
				return this._Problem.Entity;
			}
			set
			{
				Problem previousValue = this._Problem.Entity;
				if (((previousValue != value) 
							|| (this._Problem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Problem.Entity = null;
						previousValue.Solutions.Remove(this);
					}
					this._Problem.Entity = value;
					if ((value != null))
					{
						value.Solutions.Add(this);
						this._ProblemId = value.ProblemId;
					}
					else
					{
						this._ProblemId = default(int);
					}
					this.SendPropertyChanged("Problem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Votes(Vote entity)
		{
			this.SendPropertyChanging();
			entity.Solution = this;
		}
		
		private void detach_Votes(Vote entity)
		{
			this.SendPropertyChanging();
			entity.Solution = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Problem")]
	public partial class Problem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProblemId;
		
		private string _ProblemDesc;
		
		private int _UserId;
		
		private System.Nullable<System.DateTime> _ProblemAsked;
		
		private System.Nullable<int> _ProblemViewed;
		
		private string _ProblemStatus;
		
		private EntitySet<Solution> _Solutions;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProblemIdChanging(int value);
    partial void OnProblemIdChanged();
    partial void OnProblemDescChanging(string value);
    partial void OnProblemDescChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnProblemAskedChanging(System.Nullable<System.DateTime> value);
    partial void OnProblemAskedChanged();
    partial void OnProblemViewedChanging(System.Nullable<int> value);
    partial void OnProblemViewedChanged();
    partial void OnProblemStatusChanging(string value);
    partial void OnProblemStatusChanged();
    #endregion
		
		public Problem()
		{
			this._Solutions = new EntitySet<Solution>(new Action<Solution>(this.attach_Solutions), new Action<Solution>(this.detach_Solutions));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProblemId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProblemId
		{
			get
			{
				return this._ProblemId;
			}
			set
			{
				if ((this._ProblemId != value))
				{
					this.OnProblemIdChanging(value);
					this.SendPropertyChanging();
					this._ProblemId = value;
					this.SendPropertyChanged("ProblemId");
					this.OnProblemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProblemDesc", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ProblemDesc
		{
			get
			{
				return this._ProblemDesc;
			}
			set
			{
				if ((this._ProblemDesc != value))
				{
					this.OnProblemDescChanging(value);
					this.SendPropertyChanging();
					this._ProblemDesc = value;
					this.SendPropertyChanged("ProblemDesc");
					this.OnProblemDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProblemAsked", DbType="DateTime")]
		public System.Nullable<System.DateTime> ProblemAsked
		{
			get
			{
				return this._ProblemAsked;
			}
			set
			{
				if ((this._ProblemAsked != value))
				{
					this.OnProblemAskedChanging(value);
					this.SendPropertyChanging();
					this._ProblemAsked = value;
					this.SendPropertyChanged("ProblemAsked");
					this.OnProblemAskedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProblemViewed", DbType="Int")]
		public System.Nullable<int> ProblemViewed
		{
			get
			{
				return this._ProblemViewed;
			}
			set
			{
				if ((this._ProblemViewed != value))
				{
					this.OnProblemViewedChanging(value);
					this.SendPropertyChanging();
					this._ProblemViewed = value;
					this.SendPropertyChanged("ProblemViewed");
					this.OnProblemViewedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProblemStatus", DbType="NChar(10)")]
		public string ProblemStatus
		{
			get
			{
				return this._ProblemStatus;
			}
			set
			{
				if ((this._ProblemStatus != value))
				{
					this.OnProblemStatusChanging(value);
					this.SendPropertyChanging();
					this._ProblemStatus = value;
					this.SendPropertyChanged("ProblemStatus");
					this.OnProblemStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Problem_Solution", Storage="_Solutions", ThisKey="ProblemId", OtherKey="ProblemId")]
		public EntitySet<Solution> Solutions
		{
			get
			{
				return this._Solutions;
			}
			set
			{
				this._Solutions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Problem", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Problems.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Problems.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Solutions(Solution entity)
		{
			this.SendPropertyChanging();
			entity.Problem = this;
		}
		
		private void detach_Solutions(Solution entity)
		{
			this.SendPropertyChanging();
			entity.Problem = null;
		}
	}
}
#pragma warning restore 1591
